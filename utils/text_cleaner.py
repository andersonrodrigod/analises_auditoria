import re
import string
import nltk
from nltk.corpus import stopwords


nltk.download("stopwords")

stop_words = stopwords.words("portuguese")


extra_stop_words = """DE OU POR COM E UNILATERAL DO OARA SEM DA IMPLANTE PARA PROCEDIMENTOS TECNICA ORIENTADA QUALQUER PROGRAMA 24 MESES UMA MES COBRAR CORRESPONDENTE SEGMENTO TOTAL EM J DEDICADO PERIFERICO TC SESSAO ARTICULAR VIDEOARTROSCOPICOS US CORONARIA TRATAMENTO QUANDO VIA PERCUTANEA TERAPEUTICA DIAGNOSTICA VIDEOENDOSCOPIA RETIRADA CORONARIANA RESSECCAO QUIMIOTERAPICO ANTIANGIOGENICO RX CIRURGICO CIRURGICA VASO NERVO RM TURBINOPLASTIA ONCOLOGICO JOELHO COLUNA INTRA CARTILAGINOSA VERTEBRAL A STENT TENOPLASTIA TENDAO O DISCO CARDIACO PROCEDIMENTO BILATERAL ELETROFISIOLOGICO FARMACOLOGICA TRANSLUMINAL 1 SISTEMA PROVAS COLOCACAO CIRURGIA CIRCUITO PARCIAL LIGAMENTO INCLUI RADIOFREQUENCIA BALAO SENSIBILIZACAO ARRITMOGENICO TRANSEPTAL VEIAS INTRODUCAO MULTIPOLAR NAS CODIGO VIDEOLAPAROSCOPIA LAPAROSCOPICA CATETER INFILTRACAO ESTUDO MAPEAMENTO SEPTOPLASTIA ENDOSCOPICA CORRECAO TUNEL OMBRO ADENOIDECTOMIA URETER RECONSTRUCAO REFORCO COXOFEMORAL ANESTESIA FORAMINAL METODO FACETARIA PUNHO CARPO MEDULAR DESCOMPRESSAO FACETAS RETENCIONAMENTO MULTIPLOS VASOS BIFURCACAO IMPACTO FEMORO ACETABULAR OPERATORIA OSSEO INFUSAO INTRAVITREA MEDICAMENTO ANTI INFLAMATORIO ELETROANATOMICO TRIDIMENSIONAL AMBIENTE LABRAL ANTERIOR DRENAGEM NEVRALGIA ORIENTADO ARTICULARES MANGUITO HOSPITALAR IMAGEM SUTURA TRIGEMIO ROTADOR LOMBAR MONITORIZACAO LATERAL RECIDIVANTE CRUZADO TEMPORO TEMPORO ARTICULACAO NEUROFISIOLOGICA MANDIBULAR AO NIVEL GERADOR MENISCO REPARO TRANSPOSICAO VIDEOTORACOSCOPIA PLEUROSCOPIA VIDEO PLEURAL FECHADA ALTA C INSTRUMENTACAO NERVOSO SINEQUIAS UNICO FETO MULTIPLO IMPLANTES PERIDURAL SUBARACNOIDEO ESPLENECTOMIA CORTICOIDE APARELHO EXTENSOR REALINHAMENTOS POS CONTROLE CLAVICULA GERAL DOS DEDOS COXA FÊMUR ABDOME AVENTAL EXPLORADORA RETALHOS POSTERIOR LESOES CANAL ESTREITO CAUDA EQUINA MAIS LIGAMENTARES TORNOZELO EXTERNA TUBO VENTILACAO CORPOS""".split()

custom_stop_words = set(stop_words + extra_stop_words)


def clean_text(text):
    if not isinstance(text, str):
        return ""
    text = text.upper()
    text = re.sub(f"[{string.punctuation}]", " ", text)
    words = text.split()
    words = [w for w in words if w not in custom_stop_words]
    return " ".join(words)



def normalize_words(df, column="word"):

    def mapper(word):
        word_upper = word.upper()
        # Agrupando palavras relacionadas a hérnia
        if "HERNIA" in word_upper or "HERNIORRAFIA" in word_upper:
            return "HERNIA/HERNIORRAFIA"
        if "INFILTRACAO" in word_upper or "PUNCAO" in word_upper:
            return "PUNCAO/INFILT."
        if "OCULAR" in word_upper:
            return "TRAT.OCULAR"
        if "DUPLO" in word_upper:
            return "PROCED.C/DUPLO_J"
        if "AMIGDALECTOMIA" in word_upper or "ADENOIDECTOMIA" in word_upper:
            return "AMIGDAL/ADENOID"
        if "DEFINIR" in word_upper or "ADMINISTRATIVAMENTE" in word_upper:
            return "A_DEFINIR"
        if "ABLACAO" in word_upper or"GATILHOS" in word_upper or "SUBSTRATOS" in word_upper or "ARRITMOGENICOS" in word_upper or "ELETROFISIOLOGICA" in word_upper:
            return "ABLACAO"
        if "IMPLANTE_DE_ANEL" in word_upper or "ANEL" in word_upper: 
            return "IMPLANTE_ANEL"
        if "PROCED" in word_upper or "PROCED._ODONTOLOGICO" in word_upper:
            return "PROCED.ODONTO"
        if "PRÓTESE" in word_upper or "MAMA" in word_upper:
            return "PRÓTESE_MAMA"
        if "CATETERISMO" in word_upper:
            return "CATETERISMO"
        if "MARCA" in word_upper or "PASSO" in word_upper:
            return "MARCA-PASSO"
        # Adicione outros agrupamentos aqui se quiser
        return word

    df[column] = df[column].apply(mapper)
    return df
